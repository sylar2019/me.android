/** ******************************************************************************************/
buildscript {
    repositories {
        maven { url REPO_ALIYUN_GRADLE_PLUGIN }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootPluginVersion}"
        classpath "gradle.plugin.org.jruyi.gradle:thrift-gradle-plugin:${thriftPluginVersion}"
        classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:${gprcPluginVersion}"
    }
}
/** ******************************************************************************************/

allprojects {
    group rootProject.name
    version "2.0.0"

    repositories {
        mavenLocal()
        maven { url REPO_ALIYUN_PUBLIC }
//        maven { url REPO_NEXUS_PUBLIC }
    }
}

subprojects {
    ext{
        rootPath = rootProject.rootDir.getAbsolutePath()
        gradlesPath = "${rootPath}/gradles/"
    }

    project.beforeEvaluate {
        //在解析setting.gradle之后，开始解析build.gradle之前
        println("### beforeEvaluate: " + project.name)
    }

    project.afterEvaluate {
        //在所有build.gradle解析完成后，开始执行task之前
        println("### afterEvaluate: " + project.name)

        configurations.all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                def requested = details.requested
                if (requested.group == 'com.fasterxml.jackson.core' && requested.version != "${jacksonVersion}") {
                    details.useVersion "${jacksonVersion}"
                    printVersion(details, "${jacksonVersion}")
                }
                if (requested.group == 'io.netty' && requested.version != "${nettyVersion}") {
                    if (requested.name != 'netty'
                            && requested.name != 'netty-tcnative-boringssl-static') {
                        details.useVersion "${nettyVersion}"
                        printVersion(details, "${nettyVersion}")
                    }
                }
                if (requested.group == 'com.ecwid.consul' && requested.version != "${consulVersion}") {
                    details.useVersion "${consulVersion}"
                    printVersion(details, "${consulVersion}")
                }
                if (requested.group == 'com.google.guava' && requested.name == 'guava' && requested.version != "${guavaVersion}") {
                    details.useVersion "${guavaVersion}"
                    printVersion(details, "${guavaVersion}")
                }
            }
        }
    }
}

def printVersion(DependencyResolveDetails details, String version) {
    def requested = details.requested
    def forced = String.format("%s:%s:%s", requested.group, requested.name, version)
    println("### force version:" + forced)
}
/** ******************************************************************************************/

