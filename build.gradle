/** ******************************************************************************************/
ext {
    rootPath = rootProject.rootDir.getAbsolutePath()
    gradlesPath = "${rootPath}/gradles/"
}
/** ******************************************************************************************/
buildscript {
    repositories {
        maven { url REPO_ALIYUN_GRADLE_PLUGIN }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootPluginVersion}"
        classpath "gradle.plugin.org.jruyi.gradle:thrift-gradle-plugin:${thriftPluginVersion}"
        classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:${gprcPluginVersion}"
    }
}
/** ******************************************************************************************/

allprojects {
    group rootProject.name
    version "${projectVersion}"

    repositories {
        mavenLocal()
        maven { url REPO_ALIYUN_PUBLIC }
//        maven { url REPO_NEXUS_PUBLIC }
    }
}

subprojects {
    configurations {
        all*.exclude group: "org.slf4j", module: "log4j-over-slf4j"
        all*.exclude group: "log4j", module: "log4j"
    }

    configurations.all {
        resolutionStrategy {
            force "com.google.guava:guava:${guavaVersion}"
            force "io.netty:netty-all:${nettyVersion}"
            force "com.ecwid.consul:consul-api:${consulVersion}"

            force "org.apache.commons:commons-pool2:${commonsPool2Version}"
            force "org.apache.commons:commons-lang3:${commonsLang3Version}"
            force "org.apache.commons:commons-collections4:${commonsCollections4Version}"

            force "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
            force "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
            force "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        }
    }

    project.beforeEvaluate {
        //在解析setting.gradle之后，开始解析build.gradle之前
        println("### beforeEvaluate: " + project.name)
    }

    project.afterEvaluate {
        //在所有build.gradle解析完成后，开始执行task之前
        println("### afterEvaluate: " + project.name)
    }
}

def printVersion(DependencyResolveDetails details, String version) {
    def requested = details.requested
    def forced = String.format("%s:%s:%s", requested.group, requested.name, version)
    println("### force version:" + forced)
}
/** ******************************************************************************************/

